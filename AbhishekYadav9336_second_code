//this is second code solution
#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

bool isPrime(int num) {
    if (num <= 1) return false;
    for (int i = 2; i <= sqrt(num); ++i) {
        if (num % i == 0) return false;
    }
    return true;
}
vector<int> rearrangeArray(vector<int>& arr) {
    vector<int> primes, nonPrimes;
    for (int num : arr) {
        if (isPrime(num)) {
            primes.push_back(num);
        } else {
            nonPrimes.push_back(num);
        }
    }
    if (primes.empty()) {
        sort(arr.rbegin(), arr.rend());
        return arr;
    }
    int largestPrime = *max_element(primes.begin(), primes.end());
    int smallestPrime = *min_element(primes.begin(), primes.end());
    primes.erase(remove(primes.begin(), primes.end(), largestPrime), primes.end());
    primes.erase(remove(primes.begin(), primes.end(), smallestPrime), primes.end());
    nonPrimes.insert(nonPrimes.end(), primes.begin(), primes.end());
    sort(nonPrimes.rbegin(), nonPrimes.rend());
    vector<int> result;
    result.push_back(largestPrime);
    result.insert(result.end(), nonPrimes.begin(), nonPrimes.end());
    result.push_back(smallestPrime);
    return result;
}

int main() {
    vector<int> arr1 = {5, 1, 8, 11, 2};
    vector<int> arr2 = {1, 6, 4, 13, 9, 3};
    vector<int> result1 = rearrangeArray(arr1);
    vector<int> result2 = rearrangeArray(arr2);

    for (int num : result1) cout << num << " ";
    cout << endl;

    for (int num : result2) cout << num << " ";
    cout << endl;

    return 0;
}
